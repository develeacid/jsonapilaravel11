## Comandos de configuración

A continuación se listan los comandos utilizados para configurar la aplicación:

* **`composer create-project --prefer-dist laravel/laravel json-api`**: Crea un nuevo proyecto Laravel llamado "json-api" utilizando la última versión estable del framework.

* **`git init`**: Inicializa un repositorio Git local dentro del proyecto.
* **`git remote add origin <URL de tu repositorio Git>`**:  Añade la URL de tu repositorio remoto como "origin".
* **`git add .`**:  Agrega todos los archivos del proyecto al staging area para el commit.
* **`git commit -m "Commit inicial"`**:  Crea un commit inicial con el mensaje "Commit inicial".
* **`git push -u origin main`**: Sube los cambios a la rama "main" del repositorio remoto.
* **`php artisan key:generate`**: Genera una clave única para la aplicación, utilizada para cifrar datos y sesiones.
* **`php artisan migrate`**: Ejecuta las migraciones de la base de datos, creando las tablas necesarias para la aplicación.
* **`php artisan db:seed`**: (Opcional) Ejecuta los seeders, que rellenan la base de datos con datos de ejemplo.

* **`composer require laravel-shift/blueprint --dev`**: Instala  Laravel Blueprint como una dependencia de desarrollo. Blueprint es una herramienta que permite generar código para modelos, controladores y otras clases de Laravel a partir de una definición simple y legible. La opción `--dev` indica que es una dependencia solo para desarrollo, no para producción.
Información adicional sobre Laravel Blueprint:

Permite definir modelos, controladores, migraciones, seeders, factories, formularios y tests con una sintaxis YAML sencilla.
Automatiza la generación de código repetitivo, ahorrando tiempo y esfuerzo.
Facilita la creación de prototipos y la iteración rápida en el desarrollo.
Se integra con otros paquetes de Laravel, como Laravel Test Assertions.

* **`php artisan blueprint:new`**: Crea un archivo `draft.yaml` en la raíz del proyecto. Este archivo se utiliza para definir la estructura de la aplicación, incluyendo modelos, controladores y otras clases, utilizando la sintaxis YAML de Blueprint.
* **`php artisan vendor:publish`**: Publica los archivos de configuración de un paquete específico. En este caso, probablemente se usó para publicar la configuración de Blueprint o de algún otro paquete que estés utilizando.  
* **`php artisan blueprint:build`**: Genera el código de la aplicación (modelos, controladores, etc.) basándose en la estructura definida en el archivo `draft.yaml`.

* **`php artisan install:api`**: Instala la configuración básica para una API en Laravel, incluyendo la autenticación con Sanctum y las rutas de API.
* **`php artisan make:test Articles/ListArticlesTest`**: Crea un test para la funcionalidad de listar artículos.

* **`php artisan make:resource ArticleResource`**: Este comando se usa para crear un Resource en Laravel, que es una clase que se encarga de transformar tu modelo de datos antes de enviarlos al cliente, generalmente en una respuesta JSON

* **`php artisan make:test Articles/CreateArticleTest`**: Crea un test para la funcionalidad de crear artículos.